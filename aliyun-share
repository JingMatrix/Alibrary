#! /bin/env python3

# Requirements:
# 1. [aligo](https://github.com/foyoux/aligo), which is available on pypi.org
# 2. [aria2c](https://aria2.github.io), optional dependency for downloading
# 2. An (aliyun)[https://www.aliyundrive.com/] account

# Usage Example:
# 1. Store share link index data into redis
# > python3 ./aliyun-share https://www.aliyundrive.com/s/wnfVTd1u92T/folder/619010166fe8c7b3e00f4acd813c9ed47b5fbddc
# 2. Invoke researches from redis
# > python3 ./aliyun-share 'YOUR SEARCHES'
# TODO: More friendly interface to parse search results

import re
import sys
import tempfile

from aligo import Aligo
from prompt import SearchPrompt
from migrator import Migrator
from type import AliShareInfo
from download import Download
from datetime import datetime
import logging

# Call this script without arguments to login or persist login info
if len(sys.argv) == 1:
    # refresh login token
    from aligo import Auth
    Auth(name='aligo')._refresh_token()
    sys.exit()

# Use global variables to refresh share_token after each 30 mins
update_interval = 30 * 60
expired_time = datetime.now().timestamp() + update_interval


def get_share_id(
        share_id_data_file: str = tempfile.gettempdir() + '/share_id') -> str:
    match_share_id = re.match(
        r"https://www.aliyundrive.com/s/([^/]+)(/folder)?", sys.argv[1])
    if match_share_id:
        share_id = match_share_id.group(1)
        f = open(share_id_data_file, 'w')
        f.write(share_id)
        f.close()
        return share_id


def get_file_id(share_id: str = None) -> str:
    match_file_id = re.match(r".*([0-9a-f]{40})$", sys.argv[1])
    if match_file_id:
        return match_file_id.group(1)
    else:
        return ali.get_share_info(share_id=share_id).file_infos[0].file_id


def record(share_info: AliShareInfo,
           share_token: str = None):
    redis_connection = AliShareInfo.db()

    if share_token is None:
        share_token: str = str(ali.get_share_token(share_info.share_id))

    global expired_time
    if datetime.now().timestamp() > expired_time:
        expired_time = datetime.now().timestamp() + update_interval
        record(share_info)
        return

    if share_info.type == 'folder' and not redis_connection.sismember('aliyun-share:folder', share_info.file_id):
        file_list = ali.get_share_file_list(share_id=share_info.share_id,
                                            share_token=share_token,
                                            parent_file_id=share_info.file_id)
        for file in file_list:
            record(AliShareInfo.strip(file), share_token=share_token)
        redis_connection.sadd('aliyun-share:folder', share_info.file_id)
    elif share_info.type == 'file' and not redis_connection.exists(share_info.key()):
        share_info.save()


share_id = get_share_id()
if share_id:
    ali = Aligo(use_aria2=True, level=logging.ERROR)
    share_token = ali.get_share_token(share_id)
    file_id = get_file_id(share_id)
    share_info = AliShareInfo.strip(
        ali.get_share_file(share_id=share_id,
                           file_id=file_id,
                           share_token=str(share_token)))
    record(share_info)
    if share_info.type == 'file':
        Download(share_info=share_info)
    else:
        Migrator().run()
        SearchPrompt(db=AliShareInfo.db())
else:
    Migrator().run()
    SearchPrompt(db=AliShareInfo.db(), search_text=sys.argv[1])
